<?php

namespace App\Http\Requests\Api\Game;

use App\Exceptions\Api\Player\AuthAndAccess\PlayerEmailAndPasswordException;
use App\Http\Controllers\Api\Apps\Traits\AppControllerCallableIntercept;
use Exception;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Http\JsonResponse;
use Illuminate\Validation\Rules\Password;

class RegisterUserRequest extends FormRequest
{
    use AppControllerCallableIntercept;
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'email'],
            'password' => ['required', Password::default()]
        ];
    }

    protected function failedValidation(Validator $validator)
    {
        //parent::failedValidation($validator); // TODO: Change the autogenerated stub

        $this->actionName = 'validate player register';

        $this->run(function () use ($validator){
            throw new HttpResponseException(response()->json($validator->errors(), 422));
        });
    }
}
